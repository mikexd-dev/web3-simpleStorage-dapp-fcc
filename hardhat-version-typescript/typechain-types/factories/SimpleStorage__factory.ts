/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { SimpleStorage, SimpleStorageInterface } from "../SimpleStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_favoriteNumber",
        type: "uint256",
      },
    ],
    name: "addPerson",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "nameToFavoriteNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "people",
    outputs: [
      {
        internalType: "uint256",
        name: "favoriteNumber",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "retrieve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_favoriteNumber",
        type: "uint256",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610959806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780636f760f41146100965780638bab8dd5146100b25780639e7a13ad146100e2575b600080fd5b610064610113565b6040516100719190610712565b60405180910390f35b610094600480360381019061008f9190610655565b6101a1565b005b6100b060048036038101906100ab91906105f9565b61022f565b005b6100cc60048036038101906100c791906105b0565b61039b565b6040516100d99190610712565b60405180910390f35b6100fc60048036038101906100f79190610655565b6103c9565b60405161010a92919061072d565b60405180910390f35b60006101417f0f2edcd2089af2e8becc6d652e137783f8ac35cbb70a4ec2395ce686e2aa560560001b610485565b61016d7fbb9ea47374174398e96f58b7ede47ec8082a16785ecb9ade7095efd15129c0bc60001b610485565b6101997fd7f227bb82083d31e49797fc2a7c314a2df8c0c8aaa428e0ed056c933fc4282b60001b610485565b600054905090565b6101cd7fb0af7f3b9419783dc93a822e9637bc55d3058a8104ad2fbe35ecbcf08fb324cf60001b610485565b6101f97fd220538beb09e52dea01e2f7d1912d445466ff690e38cacb2e0380705610ada260001b610485565b6102257ff6843314607b0b50d6ad78188f1363f096b1055f4d03c10a6c2adee795592e2160001b610485565b8060008190555050565b61025b7f41c222c46fbdd8c1aa0430173234310acfdc6be38cd0662816cc11c8fa21280860001b610485565b6102877f0aa0e870f4445a93cbb58eb220fded29eb8f5748ad5c63d15559636c3f12fbf460001b610485565b6102b37f5cd37b493fc2c12acd4bc0089e46a36b04e1124c8bbede84c4af45f3a2d66b2360001b610485565b60016040518060400160405280838152602001848152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001019080519060200190610319929190610488565b5050506103487fb6e73552f4cc68488e8c260be5f89f9b21c05b81d00563c5cde2761c7333c4ef60001b610485565b6103747f255f5bd6bb61e92dae6cf0b6437fe8a381314b42148fa074aea0caa322d8d92b60001b610485565b8060028360405161038591906106fb565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600181815481106103d957600080fd5b906000526020600020906002020160009150905080600001549080600101805461040290610826565b80601f016020809104026020016040519081016040528092919081815260200182805461042e90610826565b801561047b5780601f106104505761010080835404028352916020019161047b565b820191906000526020600020905b81548152906001019060200180831161045e57829003601f168201915b5050505050905082565b50565b82805461049490610826565b90600052602060002090601f0160209004810192826104b657600085556104fd565b82601f106104cf57805160ff19168380011785556104fd565b828001600101855582156104fd579182015b828111156104fc5782518255916020019190600101906104e1565b5b50905061050a919061050e565b5090565b5b8082111561052757600081600090555060010161050f565b5090565b600061053e61053984610782565b61075d565b90508281526020810184848401111561055a576105596108ec565b5b6105658482856107e4565b509392505050565b600082601f830112610582576105816108e7565b5b813561059284826020860161052b565b91505092915050565b6000813590506105aa8161090c565b92915050565b6000602082840312156105c6576105c56108f6565b5b600082013567ffffffffffffffff8111156105e4576105e36108f1565b5b6105f08482850161056d565b91505092915050565b600080604083850312156106105761060f6108f6565b5b600083013567ffffffffffffffff81111561062e5761062d6108f1565b5b61063a8582860161056d565b925050602061064b8582860161059b565b9150509250929050565b60006020828403121561066b5761066a6108f6565b5b60006106798482850161059b565b91505092915050565b600061068d826107b3565b61069781856107be565b93506106a78185602086016107f3565b6106b0816108fb565b840191505092915050565b60006106c6826107b3565b6106d081856107cf565b93506106e08185602086016107f3565b80840191505092915050565b6106f5816107da565b82525050565b600061070782846106bb565b915081905092915050565b600060208201905061072760008301846106ec565b92915050565b600060408201905061074260008301856106ec565b81810360208301526107548184610682565b90509392505050565b6000610767610778565b90506107738282610858565b919050565b6000604051905090565b600067ffffffffffffffff82111561079d5761079c6108b8565b5b6107a6826108fb565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156108115780820151818401526020810190506107f6565b83811115610820576000848401525b50505050565b6000600282049050600182168061083e57607f821691505b6020821081141561085257610851610889565b5b50919050565b610861826108fb565b810181811067ffffffffffffffff821117156108805761087f6108b8565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610915816107da565b811461092057600080fd5b5056fea2646970667358221220a0f00d3811b64e053ae9a2bda3bd5418041da51b0b849ab69ce3eba6afe086ae64736f6c63430008070033";

type SimpleStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleStorage__factory extends ContractFactory {
  constructor(...args: SimpleStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleStorage> {
    return super.deploy(overrides || {}) as Promise<SimpleStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleStorage {
    return super.attach(address) as SimpleStorage;
  }
  override connect(signer: Signer): SimpleStorage__factory {
    return super.connect(signer) as SimpleStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleStorageInterface {
    return new utils.Interface(_abi) as SimpleStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleStorage {
    return new Contract(address, _abi, signerOrProvider) as SimpleStorage;
  }
}
